{"version":3,"sources":["logo.svg","components/Cards/Card.js","components/Tabs/TabComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","console","log","cardData","map","card","index","key","tab","className","onClick","moveLeft","tabIndex","moveRight","TabComponent","Component","constructor","super","addCard","name","window","prompt","this","state","tabNames","filter","data","setState","Object","assign","cards","push","cardIndex","splice","length","bind","render","tabData","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,0GCE5B,SAASC,EAAKC,GAE3B,OADAC,QAAQC,IAAI,OAAQF,GAEC,cAAnBA,EAAMG,UACNH,EAAMG,SAASC,IAAI,CAACC,EAAMC,IACxB,yBAAKC,IAAG,UAAKP,EAAMQ,IAAX,YAAkBF,GAASG,UAAU,YAC3C,4BACEA,UAAU,OACVC,QAAS,IAAMV,EAAMW,SAASX,EAAMQ,IAAKH,EAAML,EAAMY,SAAUN,IAE9D,KAEH,2BAAID,GACJ,4BACEI,UAAU,QACVC,QAAS,IACPV,EAAMa,UAAUb,EAAMQ,IAAKH,EAAML,EAAMY,SAAUN,IAGlD,OClBI,MAAMQ,UAAqBC,YACxCC,YAAYhB,GACViB,MAAMjB,GADW,KA2BnBkB,QAAUC,IACR,IAAIhB,EAAWiB,OAAOC,OAAO,qBAC7BpB,QAAQC,IAAIoB,KAAKC,MAAMC,SAAUL,EAAMhB,GACvCmB,KAAKC,MAAMC,SACRC,OAAOjB,GAAOA,EAAIW,OAASA,GAC3Bf,IAAIsB,GACHJ,KAAKK,SAAS,CACZH,SAAUI,OAAOC,OACfP,KAAKC,MAAMC,SACXE,EAAKI,MAAMC,KAAK5B,QApCP,KA0CnBQ,SAAW,CAACe,EAAMrB,EAAMO,EAAUoB,KAChC/B,QAAQC,IAAIwB,EAAMrB,EAAM2B,GACP,IAAbpB,IACJU,KAAKK,SAAS,CACZH,SAAUI,OAAOC,OACfP,KAAKC,MAAMC,SACXF,KAAKC,MAAMC,SAASZ,EAAW,GAAGkB,MAAMC,KAAK1B,MAGjDiB,KAAKC,MAAMC,SAASZ,GAAUkB,MAAMG,OAAOD,EAAW,KAnDrC,KAsDnBnB,UAAY,CAACa,EAAMrB,EAAMO,EAAUoB,KAC7BpB,IAAaU,KAAKC,MAAMC,SAASU,OAAS,IAC9CZ,KAAKC,MAAMC,SAASZ,GAAUkB,MAAMG,OAAOD,EAAW,GACtDV,KAAKK,SAAS,CACZH,SAAUI,OAAOC,OACfP,KAAKC,MAAMC,SACXF,KAAKC,MAAMC,SAASZ,EAAW,GAAGkB,MAAMC,KAAK1B,QA1DjDiB,KAAKC,MAAQ,CACXC,SAAU,CACR,CACEL,KAAM,SACNW,MAAO,CAAC,yBAA0B,gCAEpC,CACEX,KAAM,SACNW,MAAO,CAAC,yBAA0B,gCAEpC,CACEX,KAAM,MACNW,MAAO,CAAC,yBAA0B,gCAEpC,CACEX,KAAM,SACNW,MAAO,CAAC,yBAA0B,kCAKxCR,KAAKX,SAAWW,KAAKX,SAASwB,KAAKb,MACnCA,KAAKT,UAAYS,KAAKT,UAAUsB,KAAKb,MAwCvCc,SACE,OACE,yBAAK3B,UAAU,aACb,yBAAKA,UAAU,OACZa,KAAKC,MAAMC,SAASpB,IACnB,CAACiC,EAAS/B,IACR+B,GACE,yBAAK9B,IAAG,UAAK8B,EAAQlB,KAAb,YAAqBb,GAASG,UAAU,WAC9C,2BAAI4B,EAAQlB,MACZ,kBAACpB,EAAD,CACEa,SAAUN,EACVE,IAAK6B,EAAQlB,KACbR,SAAUW,KAAKX,SACfE,UAAWS,KAAKT,UAChBV,SAAUkC,EAAQP,QAEpB,4BACErB,UAAU,SACVC,QAAS,IAAMY,KAAKJ,QAAQmB,EAAQlB,OAFtC,iBC/ElB,MAAMmB,UAAYvB,YAChBqB,SACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QAMO6B,QCHKC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.0fd464c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nexport default function Card(props) {\n  console.log(\"Mani\", props);\n  return (\n    props.cardData !== \"undefined\" &&\n    props.cardData.map((card, index) => (\n      <div key={`${props.tab}-${index}`} className=\"dataCard\">\n        <button\n          className=\"left\"\n          onClick={() => props.moveLeft(props.tab, card, props.tabIndex, index)}\n        >\n          {\"<\"}\n        </button>\n        <p>{card}</p>\n        <button\n          className=\"right\"\n          onClick={() =>\n            props.moveRight(props.tab, card, props.tabIndex, index)\n          }\n        >\n          {\">\"}\n        </button>\n      </div>\n    ))\n  );\n}\n","import React, { Component } from \"react\";\nimport Card from \"../Cards/Card\";\n\nexport default class TabComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabNames: [\n        {\n          name: \"Winnie\",\n          cards: [\"Buys eggs from grocery\", \"Remind me of drinking water\"]\n        },\n        {\n          name: \"George\",\n          cards: [\"Buys eggs from grocery\", \"Remind me of drinking water\"]\n        },\n        {\n          name: \"Bob\",\n          cards: [\"Buys eggs from grocery\", \"Remind me of drinking water\"]\n        },\n        {\n          name: \"Thomas\",\n          cards: [\"Buys eggs from grocery\", \"Remind me of drinking water\"]\n        }\n      ]\n    };\n    /*this.addCard = this.addCard.bind(this);*/\n    this.moveLeft = this.moveLeft.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n  }\n\n  addCard = name => {\n    let cardData = window.prompt(\"Please add a card\");\n    console.log(this.state.tabNames, name, cardData);\n    this.state.tabNames\n      .filter(tab => tab.name === name)\n      .map(data =>\n        this.setState({\n          tabNames: Object.assign(\n            this.state.tabNames,\n            data.cards.push(cardData)\n          )\n        })\n      );\n  };\n\n  moveLeft = (data, card, tabIndex, cardIndex) => {\n    console.log(data, card, cardIndex);\n    if (tabIndex === 0) return;\n    this.setState({\n      tabNames: Object.assign(\n        this.state.tabNames,\n        this.state.tabNames[tabIndex - 1].cards.push(card)\n      )\n    });\n    this.state.tabNames[tabIndex].cards.splice(cardIndex, 1);\n  };\n\n  moveRight = (data, card, tabIndex, cardIndex) => {\n    if (tabIndex === this.state.tabNames.length - 1) return;\n    this.state.tabNames[tabIndex].cards.splice(cardIndex, 1);\n    this.setState({\n      tabNames: Object.assign(\n        this.state.tabNames,\n        this.state.tabNames[tabIndex + 1].cards.push(card)\n      )\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          {this.state.tabNames.map(\n            (tabData, index) =>\n              tabData && (\n                <div key={`${tabData.name}-${index}`} className=\"tabData\">\n                  <p>{tabData.name}</p>\n                  <Card\n                    tabIndex={index}\n                    tab={tabData.name}\n                    moveLeft={this.moveLeft}\n                    moveRight={this.moveRight}\n                    cardData={tabData.cards}\n                  />\n                  <button\n                    className=\"button\"\n                    onClick={() => this.addCard(tabData.name)}\n                  >\n                    Add card\n                  </button>\n                </div>\n              )\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TabComponent from \"./components/Tabs/TabComponent\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TabComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}